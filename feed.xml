<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://sergioalbors.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://sergioalbors.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-06-29T21:24:15+00:00</updated><id>https://sergioalbors.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Polynomial regressions</title><link href="https://sergioalbors.github.io/blog/2025/polynomialregressions/" rel="alternate" type="text/html" title="Polynomial regressions"/><published>2025-05-15T00:00:00+00:00</published><updated>2025-05-15T00:00:00+00:00</updated><id>https://sergioalbors.github.io/blog/2025/polynomialregressions</id><content type="html" xml:base="https://sergioalbors.github.io/blog/2025/polynomialregressions/"><![CDATA[<h2 id="getting-started">GETTING STARTED</h2> <p>This page is written to teach people or give an idea about what regressions are used for, their mathematical baground and its appliances in our day to day. You can find the python implementation code of everything talked about below the theory explanations.</p> <p>A regression is a mathematical analysis method used to predict the outcome of future events between other things. What it does, it estimates the relationship between a dependent variable and one or more independent variables. This can be used to make predictions of the future.</p> <p>The simplest example:</p> <p>If you know the number of study hours of a student, you can predict his score on a test.</p> <h3 id="what-is-polynomial-regression">WHAT IS POLYNOMIAL REGRESSION?</h3> <p>A polynomial regression is a form of regression analysis in which the relation between the independent variables and dependent variables are modeled in a n degree polynomial.</p> <p>This polynomials can go from a 1st degree polynomial to a nth degree polynomial:</p> <p>linear:- $y = a0 + a1x$</p> <p>quadratic:- $y = a0 + a1x + a2x^2$</p> <p>nth grade:- $y = a_0 + a_1 x + a_2 x^2 + \dots + a_n x^n$</p> <p>With this being said, we suppose our equation has n degrees and we want to minimize the error between the training data and the predicted values, ideally we’d like our error to be 0, this would mean we’ve built a regression model with 100% accuracy or that our function doesn’t have any gausian noise.</p> <p>So the we are seeking to minimize ( get as close to 0 as we can) the following:</p> \[E = \sum_{i=1}^m \left( y_i - \hat{y}(x_i) \right)^2\] <h3 id="why-is-polynomial-regression-so-important">Why is polynomial regression so important?</h3> <p>Let’s consider a case of simple linear regression:</p> <p>linear vs polynomial</p> <p><img src="/assets/img/linearvspolynomial.png" alt="alt text"/></p> <p>As we can see in the picture above, the linear model has very poor performance, whereas the polynomial model has a much better adjustment and consequently, will have a lower error.</p> <p>Polynomial regression is used when the relationship between our data samples isn’t ineal, and consequently the data samples form a kind of curve or multiple curves that cannot be fitted with a straight line.</p> <h3 id="vandermonde-square-system-with-n-points-polynomial-of-degree-n-1">VANDERMONDE (Square system with n points, Polynomial of degree n-1)</h3> <p>We will only be able to apply this method if the xi are different and our polynomial is a degree less than the number of points (n-1), then our matrix will be invertible.</p> <h4 id="vandermonde-explanation">VANDERMONDE EXPLANATION</h4> <ol> <li>We have our number of data points, could be 10 could be n points.</li> <li>We assume the equation that best fits the points has this form:</li> </ol> <p>$f(x) = a0 + a1x + a2x^2 + a3x^3 + … + anx^n + e$</p> <ol> <li>With this information, we can proceed to form our vandermonde matrix to find the coefficients of this polynomial.</li> </ol> \[V(a_0, a_1, \dots, a_{n-1}) = \begin{bmatrix} 1 &amp; a_0 &amp; a_0^2 &amp; \cdots &amp; a_0^{n-1} \\ 1 &amp; a_1 &amp; a_1^2 &amp; \cdots &amp; a_1^{n-1} \\ \vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ 1 &amp; a_{n-1} &amp; a_{n-1}^2 &amp; \cdots &amp; a_{n-1}^{n-1} \end{bmatrix}\] <ol> <li>The equation we’ll have to solve has the following form: $VA=Y$</li> </ol> <p>where :</p> <ul> <li> <p>V: our vandermonde matrix</p> </li> <li> <p>A: matrix of coefficients</p> </li> <li> <p>Y: output vector, the y axis of our points</p> </li> </ul> <ol> <li>If we want to figure out the values of the coefficients of our polynomial, then what we want is the X, the matrix of coefficients.</li> </ol> <p>Solving the previous equation would lead to: $VA=Y$ =</p> <p>= $V^-1Y=A$</p> <p>Where $V^-1$ = the inverse of our vandermonde matrix</p> <p>The inverse of a matrix is:</p> \[V^{-1} = \frac{\operatorname{adj}(V^T)}{\det(V)}\] <p>The determinant of our vandermonde matrix is:</p> \[\det(V) = \prod_{1 \le i &lt; j \le n} (x_j - x_i)\] <p>Once we have the coefficients of our polynomial, we will have found the equation that best fits our data samples. Here is an example implementeed in python code:</p> <p>Let’s say we want to create a function that best fits our 20 points, so our function will be a 19th degree polynomial.</p> <p>import numpy as np</p> <p>import matplotlib.pyplot as plt</p> <p>n = 10</p> <p>x = np.random.uniform(-100, 100, n)</p> <p>y = np.random.uniform(-100, 100, n)</p> <p>a = np.polyfit(x, y, n-1)</p> <p>V = np.vander(x, N=len(x), increasing = False) # we create our vandermonde matrix</p> <p>v*a=y # we represent our system of linear equations</p> <p>a = np.linalg.solve(V, y) # we solve our system</p> <p>polinomio = np.poly1d(a) # a = coefficients of our polynomial</p> <p>x_fit = np.linspace(min(x), max(x), 100) # we generate a set of points to plot</p> <p>y_fit = polinomio(x_fit)</p> <p>plt.scatter(x, y, color = ‘red’)</p> <p>plt.plot(x_fit, y_fit)</p> <p>plt.show()</p> <p>print(polinomio)</p> <p>Here is the result in pyhton:</p> <p><img src="/assets/img/vandermonde.png" alt="alt text"/></p> <p>and the polynomial shown at the terminal ( if there is no terminal you can press ctrl + j) is:</p> <p><img src="/assets/img/polynomialv.png" alt="alt text"/></p> <h3 id="x-tx1xty--more-points-than-coefficients">(X TX)^−1X^TY — More points than coefficients</h3> <h4 id="overfitting-vs-underfitting">OVERFITTING VS UNDERFITTING</h4> <p>The first thing we need to have clear is what is considered in the machine learning world as a good predicting model: if our model does the following things it can be considered good:</p> <ul> <li> <p>our model avoids underfitting and overfitting</p> </li> <li> <p>adapts well to new/unseen data</p> </li> <li> <p>brings the error/cost function very close to 0 (closely matches real value with the predicted one)</p> </li> </ul> <p>Let’s get into what the first point means and how can we avoid that.</p> <h5 id="overftting">Overftting</h5> <p>Overfitting appears when our model has too many parameters and learns too much from the training data, including learning from details that aren’t relevant, like noise. This model fits very well our training data samples but sticks too much to them failing to make a good prediction of the new data.</p> <p>See it as a student that prepares for a test memorizing the answers of the last exam without understanding the topic, it will do very good on the exam he has memorized, but in the actual exam he will get a very low score because he sticks too much to the training data.</p> <h5 id="underfitting">Underfitting</h5> <p>Underfitting is the opposite of overfitting. Instead of being too complex, underfitting appears when a model is too simple to capture what is really going on with the data.</p> <p>If we tried to do a linear regression on data that forms a curve, our prediction line, would fit awfully our points right? The line would miss a lot of points.</p> <p>If a student doesn’t study at all, he will score poorly both on the actual exam and the practice exams.</p> <p>ways to avoid underfitting:</p> <ul> <li>increase complexity of our prediction</li> </ul> <p><img src="/assets/img/image.png" alt="alt text"/></p> <h3 id="regularization-less-points-than-coefficients--ridgelasso">Regularization less points than coefficients – Ridge/Lasso</h3> <p>A very useful way to fight or overcome overfitting problems in our models is to add a regularization. There are plenty of types but we will cover the 2 principal regularizations, L2 and L1.</p> <p>Overfitting is a problem that occurs when the regression model gets tuned to the training data too much that it does not generalize well. It is also called a model with high variance as the difference between the actual value and the predicted value on the test set tend to be high.</p> <p>LASSO (L1)</p> <p>Lasso helps us fight overfitting by penalizing certain coefficients and shrinking them towards zero. This penalty “targets” coefficients that are least important and just add noise to our model.</p> <p>For instance, imagine we are packing for a trip to vietnam and we are carrying only one bag and the company you are flying with doesn’t allow hand baggage to weigh more than 8 kg. After packing, you find out your bag is 3 kg overweight. Eventually, you’ll have to get rid of things until you meet with the weight requirements of the airline, but there are things you need and things that aren’t that important. So to reduce weight you’ll have to get rid of the things thst aren’t crucial for your trip.</p> <p>Lasso does the same thing, targets features that aren’t really important for our model and shrinks them towards 0 to make them irrelevant. If your model didn’t shirnk them towards 0, it wouldn’t be very accurate due to your prediction trying to fit every single variable and would end up highly overfitted resulting in a very inaccurate model.</p> <p>In order to add a type L1 regularitzation to our model, first we’ll have to understand a new concept called: Gradient descent. You can find an explanation based on what I’ve understood <a href="https://sergioalbors.github.io/blog/2025/gradientdescent/">here</a>.</p> <p>RIDGE (L2)</p> <p>If we drop in variance, our line will not fit the training data as good as a linear regression line, but it provides better long term predictions. We sacrifice good adaptation to the training data in order to get a better fit on the predicited values.</p> <p>Let’s compare the simple regression model matrix equation with the ridge regression model matrix equation to see how they differ from each other:</p> \[w = (X^T X + \lambda I)^{-1} X^T y\] <p>this being the penalty added equation</p> \[w = (X^T X)^{-1} X^T y\] <p>this being a simple linear regression</p> <p>Very similarly, the ridge model seeks the same thing but with a new concept added to the equation, something called penalty. Ridge regression adds a regularization term that helps our model prevent overfitting by penalizing large coeffcicients nad sticking to smaller ones in order to stabilize the model.</p> <p>Let’s see an example implemented in python code:</p> <p>import numpy as np</p> <p>import matplotlib.pyplot as plt</p> <p>n = 100</p> <p>np.random.seed(42)</p> <p>x = np.random.uniform(-2, 2, n)</p> <p>x = np.sort(x)</p> <p>def f(x): # the function we’ll be using</p> <p>return np.sin(2*x)</p> <p>y = f(x)</p> <p>y_t = f(x) + 10*np.random.randn(n) # we add some gaussian noise to our function</p> <p>degree = 4</p> <p>X = np.vstack([x**i for i in range(degree + 1)]).T # create our matrix</p> <p>alpha = 10 # the “severeness” of our penalty</p> <p>I = np.eye(X.shape[1]) # we form our matrix n x n</p> <p>I[0, 0] = 0 # we avoid penalizing the constant value of our model</p> <p>r4 = np.matmul(np.linalg.inv(np.matmul(X.T, X) + alpha * I ),np.matmul(X.T, y_t)) # we solve the equation mentioned above</p> <p>yh4 = np.matmul(X, r4) # multiply our matrix by the result of the equation above to get the coefficients</p> <p>plt.scatter(x, y, label = ‘data’)</p> <p>plt.plot(x, yh4, color = ‘red’, label = ‘predicted values’)</p> <p>plt.legend()</p> <p>plt.show()</p> <h3 id="choosing-the-correct-value-for-lambda">Choosing the correct value for lambda</h3> <p>At first, the value we have to establish $\lambda$ at is not known and a way to choose the correct value is to test many values and see which one performs best. However there are multiple algorithm that can help us determnine the most appropriate value of this parameter for each case.</p> <p>This value is crucial to accomploish a succesfull/accurate regression model. This parameter controls how strong our coefficientrs will be shrunk towards 0. If $\lambda=0$ our penalty dissapears and we will only be minimizing a simple regression model. And the larger we make $\lambda$ our predictions for y will become less sensitive to s, due to the slope of our line getting asymptotically closer to 0.</p>]]></content><author><name></name></author><category term="regressions"/><category term="lasso,ridge"/><summary type="html"><![CDATA[polynomial regressions explained]]></summary></entry><entry><title type="html">GRADIENT DESCENT</title><link href="https://sergioalbors.github.io/blog/2025/gradientdescent/" rel="alternate" type="text/html" title="GRADIENT DESCENT"/><published>2025-04-18T00:00:00+00:00</published><updated>2025-04-18T00:00:00+00:00</updated><id>https://sergioalbors.github.io/blog/2025/gradientdescent</id><content type="html" xml:base="https://sergioalbors.github.io/blog/2025/gradientdescent/"><![CDATA[<h2 id="getting-started">Getting started</h2> <p>After reading this post, you will hopefully understand the concept of gradient descent, the maths behind it and how can it be applied for a lasso regression to predict the outcome of future events. The person who wrote this blog me:) , assumes the reader has basic calculus knowledge such as the concept of derivatives, maxima, minima and the slope of a function and other things.</p> <p>Gradient descent is an algorithm used to estimate the values of the parameters of a function used to reduce a cost function, or the error between our predicted values and the actual values.</p> <p>Similar to the least squares method, we want to minimize our error/cost function to keep the error between our predictions and the actual values as close as 0 as we can. However to do so, we cannot apply the basic calculus method of:</p> <p>$f’(x)=0$</p> <p>If we had a simple polynomial such as a quadratic education like:</p> <p>${2x^2}-5=0$</p> <p>We could clearly see its minima is $4x=0$</p> <p>But with much more complex functions, which depend on more than 1 variable this wont’ do it. Let’s see an example to prove why we can’t apply the $f’(x)=0$ rule:</p> <p>Let’s assume we have a function that depends on 2 variables such as:</p> <p>$f(x,y)=x^2+y^2+2xy$</p> <p>If we do the regular method($f’(x)=0$), we’d have $2x+2y=0$, which is equivalent to $x=-y$. There is so much information missing here, this only shows that there exists a relationship between $x$ and $y$, but we don’t know how this function changes with respect to $y$.</p> <p>The equation that describes what this algorithm does is:</p> <p>$\mathbf{d} = \mathbf{a} - \lambda \nabla f(\mathbf{a})$</p> <p>where:</p> <ul> <li> <p>a = our learning rate</p> </li> <li> <p>$\nabla f(a)$ = the gradient of our function</p> </li> </ul> <p>In order to solve complex functions with these equation, will have to figure out what the following things mean:</p> <h5 id="1-the-direction-gradient">1. the direction (gradient)</h5> <h5 id="2-the-learning-rate">2. the learning rate</h5> <h2 id="1how-to-know-the-direction-of-more-complex-functions">1.How to know the direction of more complex functions?</h2> <p>To find the direction of maximum growth for more complex functions that depend on more than one variable, it is necessary to first differentiate with respect to one variable, then with respect to another, and so on. For example, if our cost function depends on three variables, we will need to calculate three partial derivatives, one for each variable.</p> <p>Partial derivatives allow us to compute the gradient of a function. The gradient is a vector that points in the direction of the function’s maximum growth and indicates how the function’s values change in each direction.</p> <p>For instance, if our cost function depends on 2 variables like $x$ or $y$,such as:</p> <p>$C(x,y)=2x-3y+6$</p> <p>We will have to first differentiate with respect to $x$, and then differentiate with respect to $y$, resulting in:</p> <p>$\frac{\partial C}{\partial x}=2$</p> <p>$\frac{\partial C}{\partial y}=-3$</p> <p>Therefore, the gradient of our cost function will be:</p> <p>$\nabla f = \left( 2, -3 \right)$</p> <p>Once we know the direction of maximum growth, (2, -3) in this case, gradient descent works by taking very small steps in the opposite direction of the gradient. This small steps are the learning rate of our cost function.</p> <h6 id="why-the-opposite-direction">Why the opposite direction?</h6> <p>Because we want to find the minima, and the gradient as we stated multiple times, gives us the maximum growth, so the opposite direction will hopefully lead us to the lowest point of the function (spoiler: if we don’t skip that point).</p> <h2 id="2learning-rate">2.Learning rate</h2> <p>The Learning rate determinates the size of the little jumps forward or steps taken in the opposite site of the gradient to reach the minimum. The learning rate sometimes called alpha usually has a small value.</p> <p>If the alpha is too high, the steps are bigger, but there is a potential risk of overshooting the minimum point and skipping it.</p> <p>However, a very small learning rate isn´t ideal either because it takes too many steps to get to the lowest point of the cost function and this could compromise the overall efficiency of your algorithm.</p> <p>Think at it as if you were trying to sintonize a radio to a certain frequence. Let’s say we start at a frequency of 2.50 hz, and the frequence of our unit is at 15.50hz, if you start adding 5 hz every time, you will never find the right frequency due to your learning rate being too high and missing your target. But if you add little steps of 0.1 hz, it could take you forever to find the right frequence.</p> <p><img src="/assets/img/learningrate.png" alt="alt text"/></p>]]></content><author><name></name></author><category term="gradientdescent"/><summary type="html"><![CDATA[a basic explanation about gradient descent and it's possible applications]]></summary></entry></feed>